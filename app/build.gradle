apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.tencent.tinker.patch'//apply tinker插件
apply plugin: 'com.antfortune.freeline'
//apply plugin: 'realm-android'
def javaVersion = JavaVersion.VERSION_1_7
android {
    compileSdkVersion 24
    buildToolsVersion '24.0.3'

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    packagingOptions {
//        exclude 'META-INF/LICENSE.txt'
//        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId "com.kerchin.yellownote"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 7
        versionName "1.07"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true//
        /**
         * not like proguard, multiDexKeepProguard is not a list, so we can't just
         * add for you in our task. you can copy tinker keep rules at
         * build/intermediates/tinker_intermediates/tinker_multidexkeep.pro
         */
        multiDexKeepProguard file("keep_in_main_dex.txt")
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "CLIENTVERSION", "\"${gitSha()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }
    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "123456"
                keyAlias "test"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
//            zipAlignEnabled true
//            shrinkResources true
//            buildConfigField "String", "CHANNEL", "\"dev\""
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    //android
    compile 'com.android.support:appcompat-v7:24.+'
    compile 'com.android.support:recyclerview-v7:24.+'
    compile 'com.android.support:design:24.+'
    //    compile 'com.android.support:support-v4:24.+'
    //leancloud服务器上jar包
    compile 'cn.leancloud.android:avoscloud-sdk:v3.14.5'
    compile 'cn.leancloud.android:okio-parent:1.6.0-leancloud'
    compile 'cn.leancloud.android:fastjson:1.1.40-leancloud'
    //检测内存泄漏
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //weakHandler
    compile 'com.badoo.mobile:android-weak-handler:1.1'
    //疯狂更新的高star对话框
    compile 'com.afollestad.material-dialogs:core:0.9.0.2'
    //权限获取 未应用
    compile 'pub.devrel:easypermissions:0.2.0'
    //    //material样式库
    //    compile 'com.github.vajro:MaterialDesignLibrary:1.6'
    //较好的圆形图像控件 持续修改中
    compile 'de.hdodenhof:circleimageview:2.1.0'
    //磁盘先进先出缓存 基本停止commit
    //    compile 'com.jakewharton:disklrucache:2.0.2'
    //    //图片加载框架 更新得很勤
    //    debugCompile 'com.github.bumptech.glide:glide:3.7.0'
    //安全的preference 慢速更新中
    compile 'com.scottyab:secure-preferences-lib:0.1.4'
    //黄油刀 持续更新中
    compile 'com.jakewharton:butterknife:8.4.0'
    //共同使用
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    //可靠的作者 No service of type Factory<LoggingManagerInternal> available in ProjectScopeServices.
    //    compile 'com.kaopiz:kprogresshud:1.0.5'
    //手势密码 有时修复bug
    compile 'me.zhanghai.android.patternlock:library:2.0.3'
    //爆炸效果库 已经停止更新
    compile 'tyrantgit:explosionfield:1.0.1'
    //！已经停止更新
    compile 'com.nineoldandroids:library:2.4.0'
    //progressDialog已经停止更新
    //    compile 'com.bigkoo:svprogresshud:1.0.6'
    //右划退出库 已经停止更新
//    compile project(':SlidingLibrary')
    compile(name: 'SlidingLibrary-release', ext: 'aar')
    //add getState() and HKQController
//    compile project(':JJSearchViewAnim')
    compile(name: 'JJSearchViewAnim-release', ext: 'aar')
    //按住持续作用的控件 已改造
//    compile project(':snappingstepper')
    compile(name: 'snappingstepper-release', ext: 'aar')
//    compile project(path: ':progresslayout')
    compile(name: 'progresslayout-release', ext: 'aar')
    //通用adapter持续更新中 已有新版但是更新会出问题
    compile 'org.byteam.superadapter:superadapter:3.3'
    //弹出菜单库 可靠的作者 minSDK = 15
    compile 'me.wangyuwei:FlipShare:1.0.1'
    //几行集成二维码
    compile 'cn.yipianfengye.android:zxing-library:1.9'
    //multidex
    compile "com.android.support:multidex:1.0.1"
    //可选，用于生成application类
    compile('com.tencent.tinker:tinker-android-anno:1.6.2')
    //tinker的核心库
    compile('com.tencent.tinker:tinker-android-lib:1.6.2')
    //ormlite
    compile files('libs/ormlite-android-5.0.jar')
    compile files('libs/ormlite-core-5.0.jar')
    compile project(':baselibrary')
//    compile(name: 'baselibrary-release', ext: 'aar')
    compile 'com.github.rubensousa:bottomsheetbuilder:1.5'
    compile 'me.immortalz:transitionhelper:1.0.6'
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute().text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def bakPath = file("${buildDir}/bakApk/")
/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true
    //you should bak the following files
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-1009-13-28-53.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false//
        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()//"tinkerId"
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"
            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = ["com.tencent.tinker.loader.*",
                      "com.kerchin.yellownote.global.MyApplication",
                      "com.avos.avoscloud.AVOSCloud",
                      "com.kerchin.yellownote.R",
                      "com.kerchin.yellownote.data.bean.PrimaryData",
                      "com.kerchin.yellownote.utilities.CrashHandler.CrashExceptionHandler",
                      "com.kerchin.yellownote.utilities.CrashHandler.SimpleCrashReporter",
                      "com.kerchin.yellownote.utilities.NormalUtils",
                      "com.kerchin.yellownote.utilities.PatternLockUtils",
                      "com.kerchin.yellownote.utilities.tinker.TinkerManager",
                      "com.kerchin.yellownote.utilities.tinker.MyLogImp",
                      "com.securepreferences.SecurePreferences",
                      "com.uuzuche.lib_zxing.DisplayUtil"
                      //use sample, let BaseBuildInfo unchangeable with tinker
//                      "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")

        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    /**
     * task type, you want to bak
     */
    def taskName = "debug"

    /**
     * bak apk and mapping
     */
    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
            it.doLast {
                copy {
                    def date = new Date().format("MMdd-HH-mm-ss")
                    from "${buildDir}/outputs/apk/${project.getName()}-${taskName}.apk"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("${project.getName()}-${taskName}.apk", "${project.getName()}-${taskName}-${date}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${project.getName()}-${taskName}-${date}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                    into bakPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${project.getName()}-${taskName}-${date}-R.txt")
                    }
                }
            }
        }
    }
}